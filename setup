#!/bin/bash

CONFIG_DIR=$(basename $(git rev-parse --show-toplevel)) # Default configuration template depends on the repository name

# üé® Color Definitions
COLOR_RESET="\033[0m"
COLOR_GREEN="\033[1;32m"
COLOR_RED="\033[1;31m"
COLOR_YELLOW="\033[1;33m"

# Define the URL of the template repository containing the Git hooks and GitHub Actions files
TEMPLATE_REPO_URL="https://github.com/decodevM/datamaster-dev-standards.git"
TEMPLATE_DIR="datamaster-dev-standards"

# üìù Message Definitions
MESSAGE_INIT_REPO="‚ùå  .git directory not found. Please initialize the git repository first using 'git init'."
MESSAGE_CLONE_REPO="Cloning the template repository from"
MESSAGE_CLONE_FAILED="‚ùå  Failed to clone the template repository. Please check the URL and try again."
MESSAGE_CHOOSE_TEMPLATE="Choose a configuration template:"
MESSAGE_COPY_ACTIONS="Copying GitHub Actions templates to the current repository..."
MESSAGE_COPY_HOOKS="Copying Git hooks to .git/hooks..."
MESSAGE_SET_PERMISSIONS="Setting permissions for the Git hooks..."
MESSAGE_SETUP_COMPLETE="‚úÖ  Git hooks and GitHub Actions templates have been successfully set up."
MESSAGE_DONE="üéâ Setup complete! You're all set to start enforcing Git message standards in your project."
MESSAGE_INVALID_CHOICE="‚ùå  Invalid choice. Please run the script again and choose a valid option."

# üåü Function to print styled messages
print_message() {
  echo -e "$1$2$COLOR_RESET"
}

# üö® Check if the current directory is a Git repository
if [ ! -d ".git" ]; then
  print_message "$COLOR_RED" "$MESSAGE_INIT_REPO"
  exit 1
fi

rm -rf "$TEMPLATE_DIR"

# üî• Clone the template repository
print_message "$COLOR_YELLOW" "$MESSAGE_CLONE_REPO $TEMPLATE_REPO_URL..."
git clone "$TEMPLATE_REPO_URL" "$TEMPLATE_DIR"

# üö® Check if cloning was successful
if [ $? -ne 0 ]; then
  rm -rf "$TEMPLATE_DIR"
  print_message "$COLOR_RED" "$MESSAGE_CLONE_FAILED"
  exit 1
fi

# üìÇ Copy the selected configuration
cd "$TEMPLATE_DIR/$CONFIG_DIR" || exit

# üìë Copy the GitHub Actions files
print_message "$COLOR_YELLOW" "$MESSAGE_COPY_ACTIONS"
rm -rf ../../.github  # Remove existing .github directory
mkdir ../../.github   # Recreate the .github directory
cp -r .github/* ../../.github/


# üîë Copy the Git hooks
print_message "$COLOR_YELLOW" "Overwriting existing commit-msg hook..."
cp hooks/commit-msg ../../.git/hooks/commit-msg
chmod +x ../../.git/hooks/commit-msg


# üîÑ Return to the main repository folder
cd ../..

# ‚úÖ Confirm the setup
print_message "$COLOR_GREEN" "$MESSAGE_SETUP_COMPLETE"

# üßπ Optionally, remove the template repository after setup
rm -rf "$TEMPLATE_DIR"

# üéâ Done
print_message "$COLOR_GREEN" "$MESSAGE_DONE"